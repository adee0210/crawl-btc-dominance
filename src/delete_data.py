#!/usr/bin/env python3
"""
Script ƒë·ªÉ x√≥a to√†n b·ªô d·ªØ li·ªáu BTC Dominance t·ª´ MongoDB.
Ch·∫°y script n√†y ƒë·ªÉ x√≥a t·∫•t c·∫£ documents trong collection raw_btc_dominance.
"""

import os
import sys

# Th√™m ƒë∆∞·ªùng d·∫´n ƒë·ªÉ import c√°c module
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

from src.configs.config_mongo import MongoDBConfig
from src.configs.config_variable import DATA_CRAWL_CONFIG
from src.log.logger_setup import LoggerSetup

def delete_all_data():
    """X√≥a to√†n b·ªô d·ªØ li·ªáu trong collection raw_btc_dominance"""
    logger = LoggerSetup.logger_setup("DeleteDataScript")

    try:
        # K·∫øt n·ªëi MongoDB
        mongo_client = MongoDBConfig.get_client()
        db_name = DATA_CRAWL_CONFIG.get("db")
        collection_name = DATA_CRAWL_CONFIG.get("collection")

        # L·∫•y database v√† collection
        db = mongo_client.get_database(db_name)
        collection = db.get_collection(collection_name)

        # ƒê·∫øm s·ªë documents tr∆∞·ªõc khi x√≥a
        count_before = collection.count_documents({})
        logger.info(f"S·ªë documents tr∆∞·ªõc khi x√≥a: {count_before}")

        # X√≥a t·∫•t c·∫£ documents
        result = collection.delete_many({})

        # ƒê·∫øm s·ªë documents sau khi x√≥a
        count_after = collection.count_documents({})
        logger.info(f"S·ªë documents ƒë√£ x√≥a: {result.deleted_count}")
        logger.info(f"S·ªë documents sau khi x√≥a: {count_after}")

        print(f"‚úÖ ƒê√£ x√≥a th√†nh c√¥ng {result.deleted_count} documents t·ª´ collection '{collection_name}' trong database '{db_name}'")

    except Exception as e:
        logger.error(f"L·ªói khi x√≥a d·ªØ li·ªáu: {str(e)}")
        print(f"‚ùå L·ªói: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    print("üöÄ B·∫Øt ƒë·∫ßu x√≥a to√†n b·ªô d·ªØ li·ªáu BTC Dominance...")
    delete_all_data()
    print("üéâ Ho√†n th√†nh!")